// Code generated by MockGen. DO NOT EDIT.
// Source: ../routes/building.go

// Package mock_routes is a generated GoMock package.
package mock_routes

import (
	context "context"
	reflect "reflect"

	models "github.com/einherij/apt-manager/models"
	gomock "github.com/golang/mock/gomock"
)

// MockBuildingRepository is a mock of BuildingRepository interface.
type MockBuildingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBuildingRepositoryMockRecorder
}

// MockBuildingRepositoryMockRecorder is the mock recorder for MockBuildingRepository.
type MockBuildingRepositoryMockRecorder struct {
	mock *MockBuildingRepository
}

// NewMockBuildingRepository creates a new mock instance.
func NewMockBuildingRepository(ctrl *gomock.Controller) *MockBuildingRepository {
	mock := &MockBuildingRepository{ctrl: ctrl}
	mock.recorder = &MockBuildingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildingRepository) EXPECT() *MockBuildingRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockBuildingRepository) All(ctx context.Context) (models.BuildingSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].(models.BuildingSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockBuildingRepositoryMockRecorder) All(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockBuildingRepository)(nil).All), ctx)
}

// Delete mocks base method.
func (m *MockBuildingRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBuildingRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBuildingRepository)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockBuildingRepository) Find(ctx context.Context, id int) (*models.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*models.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockBuildingRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockBuildingRepository)(nil).Find), ctx, id)
}

// Upsert mocks base method.
func (m *MockBuildingRepository) Upsert(ctx context.Context, building *models.Building) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, building)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockBuildingRepositoryMockRecorder) Upsert(ctx, building interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockBuildingRepository)(nil).Upsert), ctx, building)
}
