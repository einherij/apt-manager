// Code generated by MockGen. DO NOT EDIT.
// Source: ../routes/apartment.go

// Package mock_routes is a generated GoMock package.
package mock_routes

import (
	context "context"
	reflect "reflect"

	models "github.com/einherij/apt-manager/models"
	gomock "github.com/golang/mock/gomock"
)

// MockApartmentRepository is a mock of ApartmentRepository interface.
type MockApartmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApartmentRepositoryMockRecorder
}

// MockApartmentRepositoryMockRecorder is the mock recorder for MockApartmentRepository.
type MockApartmentRepositoryMockRecorder struct {
	mock *MockApartmentRepository
}

// NewMockApartmentRepository creates a new mock instance.
func NewMockApartmentRepository(ctrl *gomock.Controller) *MockApartmentRepository {
	mock := &MockApartmentRepository{ctrl: ctrl}
	mock.recorder = &MockApartmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApartmentRepository) EXPECT() *MockApartmentRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockApartmentRepository) All(ctx context.Context) (models.ApartmentSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].(models.ApartmentSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockApartmentRepositoryMockRecorder) All(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockApartmentRepository)(nil).All), ctx)
}

// Delete mocks base method.
func (m *MockApartmentRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockApartmentRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApartmentRepository)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockApartmentRepository) Find(ctx context.Context, id int) (*models.Apartment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*models.Apartment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockApartmentRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockApartmentRepository)(nil).Find), ctx, id)
}

// FindByBuildingID mocks base method.
func (m *MockApartmentRepository) FindByBuildingID(ctx context.Context, buildingID int) (models.ApartmentSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByBuildingID", ctx, buildingID)
	ret0, _ := ret[0].(models.ApartmentSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByBuildingID indicates an expected call of FindByBuildingID.
func (mr *MockApartmentRepositoryMockRecorder) FindByBuildingID(ctx, buildingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByBuildingID", reflect.TypeOf((*MockApartmentRepository)(nil).FindByBuildingID), ctx, buildingID)
}

// Upsert mocks base method.
func (m *MockApartmentRepository) Upsert(ctx context.Context, apartment *models.Apartment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, apartment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockApartmentRepositoryMockRecorder) Upsert(ctx, apartment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockApartmentRepository)(nil).Upsert), ctx, apartment)
}
