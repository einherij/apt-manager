// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Apartments", testApartments)
	t.Run("Buildings", testBuildings)
	t.Run("SchemaMigrations", testSchemaMigrations)
}

func TestDelete(t *testing.T) {
	t.Run("Apartments", testApartmentsDelete)
	t.Run("Buildings", testBuildingsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Apartments", testApartmentsQueryDeleteAll)
	t.Run("Buildings", testBuildingsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Apartments", testApartmentsSliceDeleteAll)
	t.Run("Buildings", testBuildingsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Apartments", testApartmentsExists)
	t.Run("Buildings", testBuildingsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Apartments", testApartmentsFind)
	t.Run("Buildings", testBuildingsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Apartments", testApartmentsBind)
	t.Run("Buildings", testBuildingsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Apartments", testApartmentsOne)
	t.Run("Buildings", testBuildingsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Apartments", testApartmentsAll)
	t.Run("Buildings", testBuildingsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Apartments", testApartmentsCount)
	t.Run("Buildings", testBuildingsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Apartments", testApartmentsHooks)
	t.Run("Buildings", testBuildingsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Apartments", testApartmentsInsert)
	t.Run("Apartments", testApartmentsInsertWhitelist)
	t.Run("Buildings", testBuildingsInsert)
	t.Run("Buildings", testBuildingsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Apartments", testApartmentsReload)
	t.Run("Buildings", testBuildingsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Apartments", testApartmentsReloadAll)
	t.Run("Buildings", testBuildingsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Apartments", testApartmentsSelect)
	t.Run("Buildings", testBuildingsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Apartments", testApartmentsUpdate)
	t.Run("Buildings", testBuildingsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Apartments", testApartmentsSliceUpdateAll)
	t.Run("Buildings", testBuildingsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
}
